webpackHotUpdate("main",{

/***/ "Rr+f":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/element-component/components/table/index.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n    name:'Table',\r\n    props:{\r\n        data:{\r\n            type:Object,\r\n            required:true\r\n        },\r\n    },\r\n    data:function(){return {count:0,visibled:false,previewUrl:''}},\r\n    watch:{\r\n        data:{\r\n            immediate:true,\r\n            deep:true,\r\n            handler:function(val){(this.count === 1) && util.treeTableXcode(val.tableData);}\r\n        }\r\n    },\r\n    created:function(){\r\n        util.treeTableXcode(this.data.tableData);\r\n        this.count = 1;\r\n    },\r\n    methods: {\r\n        handleOk:function(currentBtn,scope){\r\n            scope._self.$el.click();\r\n            currentBtn.click.ok && currentBtn.click.ok(scope,currentBtn);\r\n        },\r\n        handleCancel:function(currentBtn,scope){\r\n            scope._self.$el.click();\r\n            currentBtn.click.cancel && currentBtn.click.cancel(scope,currentBtn);\r\n        },\r\n        treeClick:function(item,index){\r\n            if(item.open){\r\n                this.collapse(item,index);\r\n            }else{\r\n                this.expand(item,index);\r\n            }\r\n        },\r\n        expand:function(item,index){\r\n            if(!item.children){\r\n                return index;\r\n            }\r\n            /*!item.xgrade && this.data.tableData.some((item,index) => {\r\n                if (item.xcode.includes('-')) {\r\n                    index = item.xcode.substr(0,1);\r\n                    this.collapse(this.data.tableData[index],index);\r\n                    return true;\r\n                }\r\n            });*/\r\n            for(var i=0;item.children && i<item.children.length;i++){\r\n                var child = item.children[i];\r\n                this.data.tableData.splice(++index,0,child);\r\n                if(child.children && child.children.length > 0 && child.open){\r\n                    index = this.expand(child,index);\r\n                }\r\n            }\r\n            item.open = true;\r\n            return index;\r\n        },\r\n        collapse:function(item,index){\r\n            if(!item.children)return index;\r\n            item.open = false;\r\n            this.data.tableData.splice(Number(index)+1,util.size(item.children));\r\n        },\r\n        handleSort:function(params){this.data.sortChange && this.data.sortChange(params);},\r\n        handlePreview:function(src){\r\n            this.previewUrl = src;\r\n            this.visibled = true;\r\n        }\r\n    },\r\n});\r\nvar util = {};\r\nutil.treeTableXcode = function(data,xcode,xgrade){\r\n    xcode = xcode || \"\";\r\n    xgrade = xgrade || 0;\r\n    if (data){\r\n        for(var i=0;i<data.length;i++){\r\n            var item = data[i];\r\n            if (item.xcode && !item.xcode.includes('-')){\r\n                break;\r\n            }else{\r\n                item.xcode = xcode + i;\r\n                item.xgrade = xgrade;\r\n                if(item.children && item.children.length > 0){\r\n                    util.treeTableXcode(item.children,item.xcode+\"-\",xgrade+1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\nutil.size = function (data) {\r\n    var len = 0;\r\n    if(data.length)len = data.length;\r\n    for(var i=0;i<data.length;i++){\r\n        if (data[i].open && data[i].children){\r\n            len += util.size(data[i].children)\r\n        }\r\n    }\r\n    return len;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///Rr+f\n");

/***/ })

})