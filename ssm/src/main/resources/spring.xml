<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--====== 加载 properties 文件 (注意：spring中只能存在一个 **context:property-placeholder** 标签) ===========-->
    <!-- 方式一：
        <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="ignoreUnresolvablePlaceholders" value="true"/>
            <property name="locations">
                <list>
                    <value>classpath:settings.properties</value>
                </list>
            </property>
        </bean>
    -->
    <context:property-placeholder location="classpath:database.properties,classpath:redis-config.properties"/>

    <import resource="classpath:redis.xml"/>


    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="clone">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置最大连接数 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 最小空余数量 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 最大活跃数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 最长等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="filters" value="stat,wall"/>
    </bean>
    <!--********** druid ************-->
    <!-- stat监听数据库相关的 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 监听 sql 超过 3秒的时，认为是慢 sql ，需要人工去处理 -->
        <property name="slowSqlMillis" value="3000"/>
        <!-- 发现慢 sql，记录慢 sql -->
        <property name="logSlowSql" value="true"/>
        <!-- 当我们自己的sql很多行时，它可以聚道一起，让我们看起很容易 -->
        <property name="mergeSql" value="true"/>
    </bean>
    <!-- wall -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <!-- 告诉 druid，我们监控的 db 是 mysql -->
        <property name="dbType" value="mysql"/>
    </bean>


    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载 mybaties 配置 -->
        <property name="configLocation" value="classpath:mybaties-config.xml"/>
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定 mybaties sql文件 mapper 位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 实体类别名 -->
<!--        <property name="typeAliases" value="cn.xiaochi.model"/>-->
        <!-- 分页插件 -->
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <!-- 指定数据库类型 -->
                            <prop key="helperDialect">mysql</prop>
                        </props>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 扫描 dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.xiaochi.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>